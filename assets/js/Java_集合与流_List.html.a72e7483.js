"use strict";(self.webpackChunknotebook=self.webpackChunknotebook||[]).push([[88599],{51710:(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{eval('// ESM COMPAT FLAG\n__webpack_require__.r(__webpack_exports__);\n\n// EXPORTS\n__webpack_require__.d(__webpack_exports__, {\n  comp: () => (/* reexport */ List_html),\n  data: () => (/* binding */ data)\n});\n\n// EXTERNAL MODULE: ./node_modules/.pnpm/@vue+runtime-core@3.5.13/node_modules/@vue/runtime-core/dist/runtime-core.esm-bundler.js\nvar runtime_core_esm_bundler = __webpack_require__(6254);\n;// ./node_modules/.pnpm/vue-loader@17.4.2_vue@3.5.13_webpack@5.97.1/node_modules/vue-loader/dist/templateLoader.js??ruleSet[1].rules[2]!./node_modules/.pnpm/@vuepress+bundler-webpack@2.0.0-rc.18/node_modules/@vuepress/bundler-webpack/dist/vuepress-ssr-loader.cjs!./node_modules/.pnpm/vue-loader@17.4.2_vue@3.5.13_webpack@5.97.1/node_modules/vue-loader/dist/index.js??ruleSet[0].use[1]!./book/.vuepress/.temp/pages/Java/集合与流/List.html.vue?vue&type=template&id=aed53b26\n\n\nfunction render(_ctx, _cache) {\n  return ((0,runtime_core_esm_bundler/* openBlock */.uX)(), (0,runtime_core_esm_bundler/* createElementBlock */.CE)("div", null, _cache[0] || (_cache[0] = [\n    (0,runtime_core_esm_bundler/* createStaticVNode */.Fv)("<h2 id=\\"_1-list-接口\\" tabindex=\\"-1\\"><a class=\\"header-anchor\\" href=\\"#_1-list-接口\\"><span>1. List 接口</span></a></h2><p><code>List</code> 接口代表的集合表示一个元素有序、可重复的集合，集合中每个元素都有其对应的顺序索引。</p><p>由于 <code>List</code> 可以根据位置索引来访问集合中的元素，因此 <code>List</code> 增加了一种新的遍历集合元素的方法，即使用普通的 <code>for</code> 循环来遍历。</p><p>显然，<code>List</code> 判断对象相等只需 <code>equals()</code> 方法返回 <code>true</code>。</p><p>在老版本的 Java 实现中，<code>ArrayList</code> 的实际实现是 <code>Vector</code> 类，对于栈结构也有一个单独的 <code>Stack</code> 类，虽然这些老版本的实现是线程安全的，且功能与新版本的相关类相差无几，但还是建议使用新版本的实现而弃用老版本，即便在需要线程安全的条件下也应该使用新版本的实现然后用 <code>Collections</code> 工具类帮助线程同步。</p><h3 id=\\"_1-1-listiterator-方法\\" tabindex=\\"-1\\"><a class=\\"header-anchor\\" href=\\"#_1-1-listiterator-方法\\"><span>1.1 <code>listIterator()</code>方法</span></a></h3><p>与 <code>Set</code> 只有一个<code>iterator()</code>方法不同，<code>List</code> 还提供有一个<code>listIterator()</code>方法，该方法返回一个<code>ListIterator</code>对象，<code>ListIterator</code>接口继承了<code>Iterator</code>接口，提供了专门操作 <code>List</code> 的方法。<code>ListIterator</code>接口在 <code>Iterator</code> 接口基础上增加了如下方法：</p><table><thead><tr><th style=\\"text-align:center;\\">方法</th><th style=\\"text-align:center;\\">作用</th></tr></thead><tbody><tr><td style=\\"text-align:center;\\"><code>boolean hasPrevious()</code></td><td style=\\"text-align:center;\\">判断迭代器关联的集合是否还有上一个元素</td></tr><tr><td style=\\"text-align:center;\\"><code>Object previous()</code></td><td style=\\"text-align:center;\\">返回迭代器的上一个元素</td></tr><tr><td style=\\"text-align:center;\\"><code>void add(Object o)</code></td><td style=\\"text-align:center;\\">在指定位置插入一个元素</td></tr></tbody></table><h3 id=\\"_1-2-list-接口的方法\\" tabindex=\\"-1\\"><a class=\\"header-anchor\\" href=\\"#_1-2-list-接口的方法\\"><span>1.2 List 接口的方法</span></a></h3><p><code>List</code> 作为 <code>Collection</code> 接口的子接口，当然可以使用 <code>Collection</code> 接口里的全部方法，此外，<code>List</code> 还支持以下方法：</p><table><thead><tr><th>方法</th><th>作用</th></tr></thead><tbody><tr><td><code>void add(int index, Object element)</code></td><td>将元素 <code>element</code> 插入到 <code>index</code> 处</td></tr><tr><td><code>boolean addAll(int index, Collection c)</code></td><td>将集合 <code>c</code> 的所有元素插入到 <code>index</code> 处</td></tr><tr><td><code>Object get(int index)</code></td><td>返回位置 <code>index</code> 处的元素</td></tr><tr><td><code>int indexOf(Object o)</code></td><td>返回对象 <code>o</code> 第一次出现的位置索引</td></tr><tr><td><code>int lastIndexOf(Object o)</code></td><td>返回对象 <code>o</code> 最后一次出现的位置索引</td></tr><tr><td><code>Object remove(int index)</code></td><td>删除并返回 <code>index</code> 索引处的元素</td></tr><tr><td><code>Object set(int index, Object element)</code></td><td>将 <code>index</code> 索引处的元素替换成 <code>element</code> 对象，返回被替换的旧元素</td></tr><tr><td><code>List subList(int fromIndex, int toIndex)</code></td><td>返回索引 <code>[fromIndex, toIndex)</code> 处所有集合元素组成的子集</td></tr><tr><td><code>void replaceAll(UnaryOperator operator)</code></td><td>根据 <code>operator</code> 指定的计算规则重新设置 <code>List</code> 集合的所有元素</td></tr><tr><td><code>void sort(Comparator c)</code></td><td>根据 <code>Comparator</code> 类型的参数排序</td></tr></tbody></table><h3 id=\\"_1-3-list-的使用建议\\" tabindex=\\"-1\\"><a class=\\"header-anchor\\" href=\\"#_1-3-list-的使用建议\\"><span>1.3 List 的使用建议</span></a></h3><p>关于使用 <code>List</code> 有如下建议：</p><ol><li><p>若需要遍历 <code>List</code> 集合元素，对于 <code>ArrayList</code>，应用使用随机访问方法(<code>get</code>)来遍历；对于 <code>LinkedList</code>，应该采用迭代器(<code>Iterator</code>)来遍历。</p></li><li><p>如果需要经常执行插入、删除操作来改变包含大量数据的 <code>List</code> 集合的大小，可考虑使用 <code>LinkedList</code> 集合，因为使用 <code>ArrayList</code> 集合可能需要经常重新分配内部数组的大小。</p></li><li><p>如果多个线程需要同时访问 <code>List</code> 集合中的元素，可考虑使用 <code>Collections</code> 将集合包装成线程安全的集合。</p></li></ol><h2 id=\\"_2-arraylist-类\\" tabindex=\\"-1\\"><a class=\\"header-anchor\\" href=\\"#_2-arraylist-类\\"><span>2. ArrayList 类</span></a></h2><p>数组列表，<code>ArrayList</code> 是 <code>List</code> 的一个典型实现，完全支持 <code>List</code> 接口的全部功能。</p><table><thead><tr><th style=\\"text-align:left;\\">ArrayList 的构造方法</th><th style=\\"text-align:left;\\">作用</th></tr></thead><tbody><tr><td style=\\"text-align:left;\\"><code>ArrayList&lt;E&gt;()</code></td><td style=\\"text-align:left;\\">创建一个空 <code>List</code>（初始容量为 10）</td></tr><tr><td style=\\"text-align:left;\\"><code>ArrayList&lt;E&gt;(int initialCapacity)</code></td><td style=\\"text-align:left;\\">创建一个容量为 <code>initialCapacity</code> 的空 <code>List</code></td></tr><tr><td style=\\"text-align:left;\\"><code>ArrayList&lt;E&gt;(Collection&lt;? extends E&gt; c)</code></td><td style=\\"text-align:left;\\">按照集合 <code>c</code> 的迭代器返回的顺序构造一个包含指定集合元素的 <code>List</code></td></tr></tbody></table><p><code>ArrayList</code> 是基于数组实现的 <code>List</code> 类，所以 <code>ArrayList</code> 类封装了一个动态的、允许再分配的 <code>Object[]</code> 数组。</p><ul><li><p><code>ArrayList</code> 使用 <code>initialCapacity</code> 参数来设置该数组的长度，当向 <code>ArrayList</code> 中添加元素超出了该数组的长度时，它们的 <code>initialCapacity</code> 会自动增加；</p></li><li><p>程序员无须关心 <code>initialCapacity</code> 参数，但若向 <code>ArrayList</code> 中添加大量元素时，可使用 <code>ensureCapacity(int minCapacity)</code> 方法一次性地增加 <code>initialCapacity</code>，这可以减少重分配的次数，从而提高性能；</p></li><li><p>如果开始就知道 <code>ArrayList</code> 需要保存多少个元素，可以在创建它们时就指定 <code>initialCapacity</code> 大小；</p></li><li><p>当创建空的 <code>ArrayList</code> 时不指定 <code>initialCapacity</code> 参数，则 <code>Object[]</code> 数组的长度默认为 10。</p></li></ul><p><code>ArrayList</code> 提供了两个方法来重新分配 <code>Ojbect[]</code> 数组：</p><table><thead><tr><th>方法</th><th>解释</th></tr></thead><tbody><tr><td><code>void ensureCapacity(int minCapacity)</code></td><td>将 <code>ArrayList</code> 集合的 <code>Object[]</code> 数组长度增加大于或等于 <code>minCapacity</code> 值</td></tr><tr><td><code>void trimToSize()</code></td><td>调整 <code>ArrayList</code> 的 <code>Object[]</code> 数组长度为当前元素的个数</td></tr></tbody></table><h2 id=\\"_3-linkedlist-类\\" tabindex=\\"-1\\"><a class=\\"header-anchor\\" href=\\"#_3-linkedlist-类\\"><span>3. LinkedList 类</span></a></h2><p><code>LinkedList</code> 类是 <code>List</code> 接口的实现类，同时还实现了 <code>Deque</code> 接口，这意味着，<code>LinkedList</code> 类还可被用作双端队列、栈、队列使用。</p><p><code>LinkedList</code> 与 <code>ArrayList</code>、<code>ArrayDeque</code> 的实现机制完全不同，后两者内部以数组的形式来保存集合中的元素，而 <code>LinkedList</code> 内部以链表的形式来保存集合中的元素。因此 <code>LinkedList</code> 随机访问集合元素的性能较差，但在插入、删除元素时性能比较出色。</p><table><thead><tr><th><code>LinkedList&lt;E&gt;</code>方法</th><th>作用</th></tr></thead><tbody><tr><td><code>LinkedList()</code></td><td>构造一个空链表</td></tr><tr><td><code>LinkedList(Collection&lt;? extends E&gt; elements)</code></td><td>构造一个，并将集合中所有的元素添加到这个链表中</td></tr><tr><td><code>void addFirst(E element)</code></td><td>将某个元素添加到列表的头部</td></tr><tr><td><code>void addLast(E element)</code></td><td>将某个元素添加到列表的尾部</td></tr><tr><td><code>E getFirst()</code></td><td>返回列表头部的元素</td></tr><tr><td><code>E getLast()</code></td><td>返回列表尾部的元素</td></tr><tr><td><code>E removeFirst()</code></td><td>删除并返回列表头部的元素</td></tr><tr><td><code>E removeLast()</code></td><td>删除并返回列表尾部的元素</td></tr></tbody></table>", 25)\n  ])))\n}\n// EXTERNAL MODULE: ./node_modules/.pnpm/vue-loader@17.4.2_vue@3.5.13_webpack@5.97.1/node_modules/vue-loader/dist/exportHelper.js\nvar exportHelper = __webpack_require__(81021);\n;// ./book/.vuepress/.temp/pages/Java/集合与流/List.html.vue\n\nconst script = {}\n\n;\nconst __exports__ = /*#__PURE__*/(0,exportHelper/* default */.A)(script, [[\'render\',render]])\n\n/* harmony default export */ const List_html = (__exports__);\n;// ./book/.vuepress/.temp/pages/Java/集合与流/List.html.js\n\nconst data = JSON.parse("{\\"path\\":\\"/Java/%E9%9B%86%E5%90%88%E4%B8%8E%E6%B5%81/List.html\\",\\"title\\":\\"List\\",\\"lang\\":\\"zh-CN\\",\\"frontmatter\\":{\\"title\\":\\"List\\",\\"description\\":\\"1. List 接口 List 接口代表的集合表示一个元素有序、可重复的集合，集合中每个元素都有其对应的顺序索引。 由于 List 可以根据位置索引来访问集合中的元素，因此 List 增加了一种新的遍历集合元素的方法，即使用普通的 for 循环来遍历。 显然，List 判断对象相等只需 equals() 方法返回 true。 在老版本的 Java 实现...\\",\\"head\\":[[\\"meta\\",{\\"property\\":\\"og:url\\",\\"content\\":\\"https://chua-n.com/Java/%E9%9B%86%E5%90%88%E4%B8%8E%E6%B5%81/List.html\\"}],[\\"meta\\",{\\"property\\":\\"og:site_name\\",\\"content\\":\\"荒流的笔趣屋\\"}],[\\"meta\\",{\\"property\\":\\"og:title\\",\\"content\\":\\"List\\"}],[\\"meta\\",{\\"property\\":\\"og:description\\",\\"content\\":\\"1. List 接口 List 接口代表的集合表示一个元素有序、可重复的集合，集合中每个元素都有其对应的顺序索引。 由于 List 可以根据位置索引来访问集合中的元素，因此 List 增加了一种新的遍历集合元素的方法，即使用普通的 for 循环来遍历。 显然，List 判断对象相等只需 equals() 方法返回 true。 在老版本的 Java 实现...\\"}],[\\"meta\\",{\\"property\\":\\"og:type\\",\\"content\\":\\"article\\"}],[\\"meta\\",{\\"property\\":\\"og:locale\\",\\"content\\":\\"zh-CN\\"}],[\\"meta\\",{\\"property\\":\\"og:updated_time\\",\\"content\\":\\"2024-04-27T07:51:28.000Z\\"}],[\\"meta\\",{\\"property\\":\\"article:modified_time\\",\\"content\\":\\"2024-04-27T07:51:28.000Z\\"}],[\\"script\\",{\\"type\\":\\"application/ld+json\\"},\\"{\\\\\\"@context\\\\\\":\\\\\\"https://schema.org\\\\\\",\\\\\\"@type\\\\\\":\\\\\\"Article\\\\\\",\\\\\\"headline\\\\\\":\\\\\\"List\\\\\\",\\\\\\"image\\\\\\":[\\\\\\"\\\\\\"],\\\\\\"dateModified\\\\\\":\\\\\\"2024-04-27T07:51:28.000Z\\\\\\",\\\\\\"author\\\\\\":[{\\\\\\"@type\\\\\\":\\\\\\"Person\\\\\\",\\\\\\"name\\\\\\":\\\\\\"荒流\\\\\\",\\\\\\"url\\\\\\":\\\\\\"https://chua-n.com\\\\\\",\\\\\\"email\\\\\\":\\\\\\"chua_n@qq.com\\\\\\"}]}\\"]]},\\"headers\\":[{\\"level\\":2,\\"title\\":\\"1. List 接口\\",\\"slug\\":\\"_1-list-接口\\",\\"link\\":\\"#_1-list-接口\\",\\"children\\":[{\\"level\\":3,\\"title\\":\\"1.1 listIterator()方法\\",\\"slug\\":\\"_1-1-listiterator-方法\\",\\"link\\":\\"#_1-1-listiterator-方法\\",\\"children\\":[]},{\\"level\\":3,\\"title\\":\\"1.2 List 接口的方法\\",\\"slug\\":\\"_1-2-list-接口的方法\\",\\"link\\":\\"#_1-2-list-接口的方法\\",\\"children\\":[]},{\\"level\\":3,\\"title\\":\\"1.3 List 的使用建议\\",\\"slug\\":\\"_1-3-list-的使用建议\\",\\"link\\":\\"#_1-3-list-的使用建议\\",\\"children\\":[]}]},{\\"level\\":2,\\"title\\":\\"2. ArrayList 类\\",\\"slug\\":\\"_2-arraylist-类\\",\\"link\\":\\"#_2-arraylist-类\\",\\"children\\":[]},{\\"level\\":2,\\"title\\":\\"3. LinkedList 类\\",\\"slug\\":\\"_3-linkedlist-类\\",\\"link\\":\\"#_3-linkedlist-类\\",\\"children\\":[]}],\\"git\\":{\\"createdTime\\":1626354214000,\\"updatedTime\\":1714204288000,\\"contributors\\":[{\\"name\\":\\"chua-n\\",\\"email\\":\\"chua_n@yeah.net\\",\\"commits\\":3}]},\\"readingTime\\":{\\"minutes\\":4.52,\\"words\\":1355},\\"filePathRelative\\":\\"Java/集合与流/List.md\\",\\"localizedDate\\":\\"2021年7月15日\\",\\"excerpt\\":\\"<h2>1. List 接口</h2>\\\\n<p><code>List</code> 接口代表的集合表示一个元素有序、可重复的集合，集合中每个元素都有其对应的顺序索引。</p>\\\\n<p>由于 <code>List</code> 可以根据位置索引来访问集合中的元素，因此 <code>List</code> 增加了一种新的遍历集合元素的方法，即使用普通的 <code>for</code> 循环来遍历。</p>\\\\n<p>显然，<code>List</code> 判断对象相等只需 <code>equals()</code> 方法返回 <code>true</code>。</p>\\\\n<p>在老版本的 Java 实现中，<code>ArrayList</code> 的实际实现是 <code>Vector</code> 类，对于栈结构也有一个单独的 <code>Stack</code> 类，虽然这些老版本的实现是线程安全的，且功能与新版本的相关类相差无几，但还是建议使用新版本的实现而弃用老版本，即便在需要线程安全的条件下也应该使用新版本的实现然后用 <code>Collections</code> 工具类帮助线程同步。</p>\\",\\"autoDesc\\":true}")\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///51710\n')},81021:(__unused_webpack_module,exports)=>{eval("var __webpack_unused_export__;\n\n__webpack_unused_export__ = ({ value: true });\n// runtime helper for setting properties on components\n// in a tree-shakable way\nexports.A = (sfc, props) => {\n    const target = sfc.__vccOpts || sfc;\n    for (const [key, val] of props) {\n        target[key] = val;\n    }\n    return target;\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiODEwMjEuanMiLCJtYXBwaW5ncyI6IjtBQUFhO0FBQ2IsNkJBQTZDLEVBQUUsYUFBYSxDQUFDO0FBQzdEO0FBQ0E7QUFDQSxTQUFlO0FBQ2Y7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vbm90ZWJvb2svLi9ub2RlX21vZHVsZXMvLnBucG0vdnVlLWxvYWRlckAxNy40LjJfdnVlQDMuNS4xM193ZWJwYWNrQDUuOTcuMS9ub2RlX21vZHVsZXMvdnVlLWxvYWRlci9kaXN0L2V4cG9ydEhlbHBlci5qcz8yNmM5Il0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuLy8gcnVudGltZSBoZWxwZXIgZm9yIHNldHRpbmcgcHJvcGVydGllcyBvbiBjb21wb25lbnRzXG4vLyBpbiBhIHRyZWUtc2hha2FibGUgd2F5XG5leHBvcnRzLmRlZmF1bHQgPSAoc2ZjLCBwcm9wcykgPT4ge1xuICAgIGNvbnN0IHRhcmdldCA9IHNmYy5fX3ZjY09wdHMgfHwgc2ZjO1xuICAgIGZvciAoY29uc3QgW2tleSwgdmFsXSBvZiBwcm9wcykge1xuICAgICAgICB0YXJnZXRba2V5XSA9IHZhbDtcbiAgICB9XG4gICAgcmV0dXJuIHRhcmdldDtcbn07XG4iXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///81021\n")}}]);