"use strict";(self.webpackChunknotebook=self.webpackChunknotebook||[]).push([[69703],{93530:(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{eval('// ESM COMPAT FLAG\n__webpack_require__.r(__webpack_exports__);\n\n// EXPORTS\n__webpack_require__.d(__webpack_exports__, {\n  comp: () => (/* reexport */ _html),\n  data: () => (/* binding */ data)\n});\n\n// EXTERNAL MODULE: ./node_modules/.pnpm/@vue+runtime-core@3.5.13/node_modules/@vue/runtime-core/dist/runtime-core.esm-bundler.js\nvar runtime_core_esm_bundler = __webpack_require__(6254);\n;// ./node_modules/.pnpm/vue-loader@17.4.2_vue@3.5.13_webpack@5.97.1/node_modules/vue-loader/dist/templateLoader.js??ruleSet[1].rules[2]!./node_modules/.pnpm/@vuepress+bundler-webpack@2.0.0-rc.18/node_modules/@vuepress/bundler-webpack/dist/vuepress-ssr-loader.cjs!./node_modules/.pnpm/vue-loader@17.4.2_vue@3.5.13_webpack@5.97.1/node_modules/vue-loader/dist/index.js??ruleSet[0].use[1]!./book/.vuepress/.temp/pages/Java/集合与流/算法.html.vue?vue&type=template&id=e7577d58\n\n\nfunction render(_ctx, _cache) {\n  return ((0,runtime_core_esm_bundler/* openBlock */.uX)(), (0,runtime_core_esm_bundler/* createElementBlock */.CE)("div", null, _cache[0] || (_cache[0] = [\n    (0,runtime_core_esm_bundler/* createStaticVNode */.Fv)("<p>C++ 的 STL 库已经有几十种非常有用的算法，每个算法都应用于泛型集合，Java 类库中的算法虽没有如此丰富，都也包含了一些基本的算法：排序、二分查找、交换等有一些实用算法。</p><h2 id=\\"_1-排序\\" tabindex=\\"-1\\"><a class=\\"header-anchor\\" href=\\"#_1-排序\\"><span>1. 排序</span></a></h2><p>显然，排序算法主要针对的是 <code>List</code>。</p><p>通常而言，在查看有关算法书籍中的排序算法时，介绍的大多是有关数组的排序算法，即使用的是随机访问方式。那么，对于链表这种随机访问效率很低的列表而言，尽管可以使用一种归并排序对链表高效地排序，但 Java 语言不是这样做的，Java 选择先将所有元素转入一个数组，对数组进行排序，然后再将排序后的序列复制回链表。</p><p><code>Collections</code> 类中包含有如下相关静态方法：</p><table><thead><tr><th>方法</th><th>作用</th></tr></thead><tbody><tr><td><code>&lt;T extends Comparable&lt;? super T&gt;&gt; void sort(List&lt;T&gt; list)</code></td><td>根据元素的自然顺序排序</td></tr><tr><td><code>&lt;T&gt; void sort(List&lt;T&gt; list, Comparator&lt;? super T&gt; c)</code></td><td>根据指定 <code>Comparator</code> 产生的顺序排序</td></tr><tr><td><code>void reverse(List&lt;?&gt; list)</code></td><td>反转元素顺序</td></tr><tr><td><code>void shuffle(List&lt;?&gt; list)</code></td><td>随机排序</td></tr><tr><td><code>void shuffle(List&lt;?&gt; list, Random rnd)</code></td><td>随机排序，以 <code>rnd</code> 为随机数种子</td></tr></tbody></table><h2 id=\\"_2-二分查找\\" tabindex=\\"-1\\"><a class=\\"header-anchor\\" href=\\"#_2-二分查找\\"><span>2. 二分查找</span></a></h2><p>二分查找只有在列表有序、支持随机访问的前提下才的意义。如果必须利用迭代方式查找的一半元素来找到中间元素，二分查找就完全失去了优势，因此算法将自动退化为线性查找。</p><ul><li><code>&lt;T&gt; int binarySearch(List&lt;? extends Comparable&lt;? super T&gt;&gt; list, T key)</code>：使用二分法查找指定List中的指定元素</li><li><code>&lt;T&gt; int binarySearch(List&lt;? extends T&gt; list, T key, Comparator&lt;? super T&gt; c)</code></li></ul><h2 id=\\"_3-其他算法\\" tabindex=\\"-1\\"><a class=\\"header-anchor\\" href=\\"#_3-其他算法\\"><span>3. 其他算法</span></a></h2><p><code>Collections</code> 类中还有其他一些常用的简单算法：</p><table><thead><tr><th>方法</th><th>作用</th></tr></thead><tbody><tr><td><code>&lt;T extends Comprable&lt;? super T&gt;&gt; T min(Collection&lt;T&gt; coll)</code></td><td>根据元素的自然顺序，返回给定集合中的最小元素</td></tr><tr><td><code>&lt;T extends Comprable&lt;? super T&gt;&gt; T max(Collection&lt;T&gt; coll)</code></td><td>根据元素的自然顺序，返回给定集合中的最大元素</td></tr><tr><td><code>&lt;T&gt; min(Collection&lt;T&gt; coll, Comparator&lt;? super T&gt; comp)</code></td><td>根据 <code>Comparator</code> 指定的顺序，返回给定集合中的最小元素</td></tr><tr><td><code>&lt;T&gt; max(Collection&lt;T&gt; coll, Comparator&lt;? super T&gt; comp)</code></td><td>根据 <code>Comparator</code> 指定的顺序，返回给定集合中的最大元素</td></tr><tr><td><code>&lt;T&gt; void copy(List&lt;? super T&gt; to, List&lt;T&gt; from)</code></td><td>将原列表中的所有元素复制到目标列表的相应位置上。目标列表的长度至少要与原列表一样</td></tr><tr><td><code>&lt;T&gt; void fill(List&lt;? super T&gt; list, T value)</code></td><td>使用指定元素替换指定 <code>List</code> 集合中的所有元素</td></tr><tr><td><code>&lt;T&gt; boolean addAll(Collection&lt;? super T&gt; c, T... values)</code></td><td>将所有的值添加到给定的集合中。如果集合改变了，则返回 <code>true</code></td></tr><tr><td><code>&lt;T&gt; boolean replaceAll(List&lt;T&gt; list, T oldVal, T newVal)</code></td><td>使用一个新值 <code>newVal</code> 替换 <code>list</code> 中所有值为 <code>oldVal</code> 的元素</td></tr><tr><td><code>int indexOfSubList(List&lt;?&gt; src, List&lt;?&gt; target)</code></td><td>返回子 <code>List</code> 对象在父 <code>List</code> 对象中第一次出现的位置索引。若不存在，返回-1</td></tr><tr><td><code>int lastIndexOfSubList(List&lt;?&gt; src, List&lt;?&gt; target)</code></td><td>返回子 <code>List</code> 对象在父 <code>List</code> 对象中最后一次出现的位置索引。若不存在，返回-1</td></tr><tr><td><code>void swap(List&lt;?&gt; list, int i, int j)</code></td><td>交换 <code>List</code> 中索引 <code>i</code> 和索引 <code>j</code> 处的元素</td></tr><tr><td><code>void rotate(List&lt;?&gt; list, int distance)</code></td><td>若 distance &gt; 0，将后 <code>distance</code> 个元素整体移到前面；若 distance &lt; 0，将前 <code>distance</code> 个元素整体移到后面</td></tr><tr><td><code>int frequency(Collection&lt;?&gt; c, Object o)</code></td><td>返回指定集合中指定元素的出现次数</td></tr><tr><td><code>boolean disjoint(Collection&lt;?&gt; c1, Collection&lt;?&gt; c2)</code></td><td>如果两个集合没有共同的元素，则返回 <code>true</code></td></tr></tbody></table>", 12)\n  ])))\n}\n// EXTERNAL MODULE: ./node_modules/.pnpm/vue-loader@17.4.2_vue@3.5.13_webpack@5.97.1/node_modules/vue-loader/dist/exportHelper.js\nvar exportHelper = __webpack_require__(81021);\n;// ./book/.vuepress/.temp/pages/Java/集合与流/算法.html.vue\n\nconst script = {}\n\n;\nconst __exports__ = /*#__PURE__*/(0,exportHelper/* default */.A)(script, [[\'render\',render]])\n\n/* harmony default export */ const _html = (__exports__);\n;// ./book/.vuepress/.temp/pages/Java/集合与流/算法.html.js\n\nconst data = JSON.parse("{\\"path\\":\\"/Java/%E9%9B%86%E5%90%88%E4%B8%8E%E6%B5%81/%E7%AE%97%E6%B3%95.html\\",\\"title\\":\\"算法\\",\\"lang\\":\\"zh-CN\\",\\"frontmatter\\":{\\"title\\":\\"算法\\",\\"description\\":\\"C++ 的 STL 库已经有几十种非常有用的算法，每个算法都应用于泛型集合，Java 类库中的算法虽没有如此丰富，都也包含了一些基本的算法：排序、二分查找、交换等有一些实用算法。 1. 排序 显然，排序算法主要针对的是 List。 通常而言，在查看有关算法书籍中的排序算法时，介绍的大多是有关数组的排序算法，即使用的是随机访问方式。那么，对于链表这种随机...\\",\\"head\\":[[\\"meta\\",{\\"property\\":\\"og:url\\",\\"content\\":\\"https://chua-n.com/Java/%E9%9B%86%E5%90%88%E4%B8%8E%E6%B5%81/%E7%AE%97%E6%B3%95.html\\"}],[\\"meta\\",{\\"property\\":\\"og:site_name\\",\\"content\\":\\"荒流的笔趣屋\\"}],[\\"meta\\",{\\"property\\":\\"og:title\\",\\"content\\":\\"算法\\"}],[\\"meta\\",{\\"property\\":\\"og:description\\",\\"content\\":\\"C++ 的 STL 库已经有几十种非常有用的算法，每个算法都应用于泛型集合，Java 类库中的算法虽没有如此丰富，都也包含了一些基本的算法：排序、二分查找、交换等有一些实用算法。 1. 排序 显然，排序算法主要针对的是 List。 通常而言，在查看有关算法书籍中的排序算法时，介绍的大多是有关数组的排序算法，即使用的是随机访问方式。那么，对于链表这种随机...\\"}],[\\"meta\\",{\\"property\\":\\"og:type\\",\\"content\\":\\"article\\"}],[\\"meta\\",{\\"property\\":\\"og:locale\\",\\"content\\":\\"zh-CN\\"}],[\\"meta\\",{\\"property\\":\\"og:updated_time\\",\\"content\\":\\"2024-04-27T07:51:28.000Z\\"}],[\\"meta\\",{\\"property\\":\\"article:modified_time\\",\\"content\\":\\"2024-04-27T07:51:28.000Z\\"}],[\\"script\\",{\\"type\\":\\"application/ld+json\\"},\\"{\\\\\\"@context\\\\\\":\\\\\\"https://schema.org\\\\\\",\\\\\\"@type\\\\\\":\\\\\\"Article\\\\\\",\\\\\\"headline\\\\\\":\\\\\\"算法\\\\\\",\\\\\\"image\\\\\\":[\\\\\\"\\\\\\"],\\\\\\"dateModified\\\\\\":\\\\\\"2024-04-27T07:51:28.000Z\\\\\\",\\\\\\"author\\\\\\":[{\\\\\\"@type\\\\\\":\\\\\\"Person\\\\\\",\\\\\\"name\\\\\\":\\\\\\"荒流\\\\\\",\\\\\\"url\\\\\\":\\\\\\"https://chua-n.com\\\\\\",\\\\\\"email\\\\\\":\\\\\\"chua_n@qq.com\\\\\\"}]}\\"]]},\\"headers\\":[{\\"level\\":2,\\"title\\":\\"1. 排序\\",\\"slug\\":\\"_1-排序\\",\\"link\\":\\"#_1-排序\\",\\"children\\":[]},{\\"level\\":2,\\"title\\":\\"2. 二分查找\\",\\"slug\\":\\"_2-二分查找\\",\\"link\\":\\"#_2-二分查找\\",\\"children\\":[]},{\\"level\\":2,\\"title\\":\\"3. 其他算法\\",\\"slug\\":\\"_3-其他算法\\",\\"link\\":\\"#_3-其他算法\\",\\"children\\":[]}],\\"git\\":{\\"createdTime\\":1655619535000,\\"updatedTime\\":1714204288000,\\"contributors\\":[{\\"name\\":\\"chua-n\\",\\"email\\":\\"chua_n@yeah.net\\",\\"commits\\":3}]},\\"readingTime\\":{\\"minutes\\":3,\\"words\\":901},\\"filePathRelative\\":\\"Java/集合与流/算法.md\\",\\"localizedDate\\":\\"2022年6月19日\\",\\"excerpt\\":\\"<p>C++ 的 STL 库已经有几十种非常有用的算法，每个算法都应用于泛型集合，Java 类库中的算法虽没有如此丰富，都也包含了一些基本的算法：排序、二分查找、交换等有一些实用算法。</p>\\\\n<h2>1. 排序</h2>\\\\n<p>显然，排序算法主要针对的是 <code>List</code>。</p>\\\\n<p>通常而言，在查看有关算法书籍中的排序算法时，介绍的大多是有关数组的排序算法，即使用的是随机访问方式。那么，对于链表这种随机访问效率很低的列表而言，尽管可以使用一种归并排序对链表高效地排序，但 Java 语言不是这样做的，Java 选择先将所有元素转入一个数组，对数组进行排序，然后再将排序后的序列复制回链表。</p>\\",\\"autoDesc\\":true}")\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///93530\n')},81021:(__unused_webpack_module,exports)=>{eval("var __webpack_unused_export__;\n\n__webpack_unused_export__ = ({ value: true });\n// runtime helper for setting properties on components\n// in a tree-shakable way\nexports.A = (sfc, props) => {\n    const target = sfc.__vccOpts || sfc;\n    for (const [key, val] of props) {\n        target[key] = val;\n    }\n    return target;\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiODEwMjEuanMiLCJtYXBwaW5ncyI6IjtBQUFhO0FBQ2IsNkJBQTZDLEVBQUUsYUFBYSxDQUFDO0FBQzdEO0FBQ0E7QUFDQSxTQUFlO0FBQ2Y7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vbm90ZWJvb2svLi9ub2RlX21vZHVsZXMvLnBucG0vdnVlLWxvYWRlckAxNy40LjJfdnVlQDMuNS4xM193ZWJwYWNrQDUuOTcuMS9ub2RlX21vZHVsZXMvdnVlLWxvYWRlci9kaXN0L2V4cG9ydEhlbHBlci5qcz8yNmM5Il0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuLy8gcnVudGltZSBoZWxwZXIgZm9yIHNldHRpbmcgcHJvcGVydGllcyBvbiBjb21wb25lbnRzXG4vLyBpbiBhIHRyZWUtc2hha2FibGUgd2F5XG5leHBvcnRzLmRlZmF1bHQgPSAoc2ZjLCBwcm9wcykgPT4ge1xuICAgIGNvbnN0IHRhcmdldCA9IHNmYy5fX3ZjY09wdHMgfHwgc2ZjO1xuICAgIGZvciAoY29uc3QgW2tleSwgdmFsXSBvZiBwcm9wcykge1xuICAgICAgICB0YXJnZXRba2V5XSA9IHZhbDtcbiAgICB9XG4gICAgcmV0dXJuIHRhcmdldDtcbn07XG4iXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///81021\n")}}]);